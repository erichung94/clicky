{"version":3,"sources":["Components/PokemonCard/index.js","Components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["PokemonCard","props","react_default","a","createElement","className","onClick","handleScoreIncrement","id","alt","name","src","image","Wrapper","children","styles","footer","height","background","width","color","textAlign","shuffleArray","array","i","length","j","Math","floor","random","temp","App","state","pokemon","score","topScore","console","log","_this","scanPokemon","identifier","clicked","setState","_this2","this","Components_Wrapper","map","pokeman","Components_PokemonCard","key","class","style","span","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"whCAWeA,MARf,SAAqBC,GACnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,qBAAqBN,EAAMO,MAClEN,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,gBCC1BC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,kBCCnCC,EAAS,CACbC,OAAQ,CACNC,OAAQ,QACRC,WAAY,WACZC,MAAO,OACPC,MAAO,QACPC,UAAW,WAIf,SAASC,EAAaC,GAEpB,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,MAkEMQ,6MA9DbC,MAAQ,CACNC,UACAC,MAAO,EACPC,SAAU,KAIZ5B,qBAAuB,SAACC,GACtB4B,QAAQC,IAAIC,EAAKN,MAAMC,SAEvB,IADA,IAAIM,EAAcD,EAAKN,MAAMC,QACrBP,EAAE,EAAEA,EAAEa,EAAYd,OAAOC,IAC/B,GAAIlB,IAAK+B,EAAYb,GAAGlB,GAAG,CACzB4B,QAAQC,IAAI,aAAeE,EAAYb,GAAGlB,IAC1C,IAAIgC,EAAaD,EAAYb,GAGjC,GAAKc,EAAWC,QAKX,CACH,IAAK,IAAIjB,EAAE,EAAGA,EAAES,EAAQR,OAAOD,IAC7BS,EAAQT,GAAGiB,SAAQ,EAEjBH,EAAKN,MAAME,MAAQI,EAAKN,MAAMG,UAChCG,EAAKI,SAAS,CAACP,SAAUG,EAAKN,MAAME,QAEtCI,EAAKI,SAAS,CAACR,MAAO,SAXtBM,EAAWC,SAAU,EACrBL,QAAQC,IAAIG,EAAW9B,MACvB4B,EAAKI,SAAS,CAACR,MAAOI,EAAKN,MAAME,MAAQ,IAW3CI,EAAKI,SAAS,CAACT,QAASX,EAAaW,8EAQ9B,IAAAU,EAAAC,KACP,OAAO1C,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,qBAAawC,KAAKZ,MAAME,MAAxB,iBAA6CU,KAAKZ,MAAMG,UACxDjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyC,EAAD,KACGD,KAAKZ,MAAMC,QAAQa,IAAI,SAAAC,GAAO,OAC7B7C,EAAAC,EAAAC,cAAC4C,EAAD,CACEP,QAAWM,EAAQN,QACnBlC,qBAAwBoC,EAAKpC,qBAC7BC,GAAIuC,EAAQvC,GACZyC,IAAKF,EAAQvC,GACbI,MAAOmC,EAAQnC,WAIrBV,EAAAC,EAAAC,cAAA,OAAK8C,MAAM,6BAA6BC,MAAOpC,EAAOC,QACpDd,EAAAC,EAAAC,cAAA,QAAM+C,MAAOpC,EAAOqC,MAApB,8BAvDQC,IAAMC,WCdJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0163967e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction PokemonCard(props) {\r\n  return (\r\n    <div className=\"card\" onClick={() => props.handleScoreIncrement(props.id)}>\r\n        <img alt={props.name} src={props.image} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokemonCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\nimport PokemonCard from \"./Components/PokemonCard\";\nimport Wrapper from \"./Components/Wrapper\";\nimport pokemon from \"./pokemon.json\";\n\nconst styles = {\n  footer: {\n    height: \"100px\",\n    background: \"darkblue\",\n    width: \"100%\",\n    color: \"white\",\n    textAlign: \"center\",\n  },\n}\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n} \n\nclass App extends React.Component {\n  state = {\n    pokemon,\n    score: 0,\n    topScore: 0,\n  };\n\n  \n  handleScoreIncrement = (id) => {\n    console.log(this.state.pokemon)\n    var scanPokemon = this.state.pokemon\n    for(let j=0;j<scanPokemon.length;j++){\n      if (id===scanPokemon[j].id){\n        console.log(\"Found it! \" + scanPokemon[j].id);\n        var identifier = scanPokemon[j];\n      }\n    }\n    if (!identifier.clicked){\n      identifier.clicked = true;\n      console.log(identifier.name);\n      this.setState({score: this.state.score + 1})\n    }\n    else {\n      for (let i=0; i<pokemon.length;i++){\n        pokemon[i].clicked=false;\n      }\n      if (this.state.score > this.state.topScore){\n        this.setState({topScore: this.state.score})\n      }\n      this.setState({score: 0})\n    }\n    this.setState({pokemon: shuffleArray(pokemon)});\n   \n    \n\n\n  }\n\n\n  render() {\n    return <div>\n      <h1> Score: {this.state.score} | Top Score: {this.state.topScore}</h1>\n      <div>\n        <Wrapper>\n          {this.state.pokemon.map(pokeman => (\n            <PokemonCard\n              clicked = {pokeman.clicked}\n              handleScoreIncrement = {this.handleScoreIncrement}\n              id={pokeman.id}\n              key={pokeman.id}\n              image={pokeman.image}\n            />\n          ))}\n        </Wrapper>\n        <div class=\"footer navbar-fixed-bottom\" style={styles.footer}>\n          <span style={styles.span}>Whatabatbingbong</span>\n        </div>\n      </div>\n    </div>\n  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}